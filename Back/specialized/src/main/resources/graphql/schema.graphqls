type Query {
    getNearbyStoreList(nearbyStoreInput: NearbyStoreInput): StoreOutputWithTotalCount
    searchStore(searchInput: String, count: Int, lat: Float, lon: Float): StoreOutputWithTotalCount
    storeRecommendationByCoordinate(lat: Float,lon: Float): [StoreOutput]
    storeDetail(store: String): Store
}

input NearbyStoreInput {
    mainHobby: [String]
    subcategory: [String]
    latitude: Float
    longitude: Float
    maxDistance: Int
    count: Int # 페이징 카운트
}

type Store{
    idx: ID!
    owner: User
    name: String
    latitude: Float
    longitude: Float
    mainCategory: HobbyMain
    subcategory: HobbySubcategory
    isClosedOnHolidays: Boolean
    explanation: String
    address: String
    contactNumber: String
    homepage: String
    imagesUrl: String
}

type StoreOutput {
    store: Store
    distance: Float
    reviewCount: Int
    averageRating: Float
    isBookmark: Boolean
}

type StoreOutputWithTotalCount{
    storeOutput: [StoreOutput]
    totalCount: Int
}

type BusinessHour {
    idx: ID!
    store: String
    dayOfWeek: String
    openAt: String
    closeAt: String
    reservationInterval: String
    isDayOff: Boolean
}

type HobbyMain{
    idx: ID!
    mainCategory: String
}

type HobbySubcategory{
    idx: ID!
    subcategory: String
}

type User {
    idx: ID!
    name: String
}
type NearbyStoreOutput{
    mainHobby: [String]
    subcategory: [String]
    latitude: Float
    longitude: Float
    maxDistance: Int
}


## 박규영
#type Query {
#    getNearbyStoreList(nearbyConditions: NearbyStoreInput): output
#    getRecommendByPosition(latitude: Float, longitude: Float): output
#    getRecommendByCategory: output
#    searchStore(searchInput: String, count: Int): output
#    storeDetail(storeID: ID!): Store
#}
#type output {
#    stores:[StoreSummary]
#    totalCount: Int
#}
#
#input NearbyStoreInput {
#    mainHobby: [String]
#    subcategory: [String]
#    latitude: Float
#    longitude: Float
#    maxDistance: Int
##    afterHour: String # 시간을 "18:00" 와 같은 형태의 문자열.
#    count: Int # 페이징 카운트
#}
#
#type Store implements StoreSummary {
#    idx: ID!
#    name: String
#    subcategory: String
#    address: String
#    distance: Float
#    reviewCount: Int
#    averageRating: Int
#    isFavorite: Boolean
#    owner: String
#    contactNumber: String
#    homepage: String
#    mainImagesUrl: String # 메인 이미지 ( Store 테이블 )
#    imageUrls: [String] # 서브 이미지 ( StoreImage 테이블 )
#    explanation: String
#    latitude: Float
#    longitude: Float
#    isClosedOnHolidays: Boolean
#    businessHours: [BusinessHour]
#}
#
#type BusinessHour {
#    idx: ID!
#    store: String
#    dayOfWeek: String
#    openAt: String
#    closeAt: String
#    reservationInterval: String
#    isDayOff: Boolean
#}
#
#interface StoreSummary {
#    idx: ID!
#    name: String
#    subcategory: String
#    address: String
#    distance: Float
#    reviewCount: Int
#    averageRating: Int
#    isFavorite: Boolean
#}
#
